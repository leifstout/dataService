{"searchDocs":[{"title":"Getting Started with DataService","type":0,"sectionRef":"#","url":"/dataService/docs/intro","content":"Getting Started with DataService","keywords":"","version":"Next"},{"title":"DataServiceClient","type":0,"sectionRef":"#","url":"/dataService/api/DataServiceClient","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"DataServiceClient","url":"/dataService/api/DataServiceClient#functions","content":" ","version":null,"tagName":"h2"},{"title":"init​","type":1,"pageTitle":"DataServiceClient","url":"/dataService/api/DataServiceClient#init","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; DataServiceClient:init() → () Initializes the DataServiceClient. local DataService = require(path.to.DataService).client DataService:init() WARNING :init(...) must be called before using any other methods. Init yields until it has received the initial data from the server.  ","version":null,"tagName":"h3"},{"title":"fetch​","type":1,"pageTitle":"DataServiceClient","url":"/dataService/api/DataServiceClient#fetch","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; DataServiceClient:fetch( path: Path? , dontSet: boolean?-- Default: false ) → any Fetches data from the server at the specified path. Sets the data locally unless dontSet is true. local DataService = require(path.to.DataService).client local fetchedCurrency = DataService:fetch({ &quot;currency&quot; }) NOTE Typically only useful if you somehow desynced your local data with the server. Otherwise, you should use DataService:get(path) to retrieve data.  ","version":null,"tagName":"h3"},{"title":"get​","type":1,"pageTitle":"DataServiceClient","url":"/dataService/api/DataServiceClient#get","content":"&lt;/&gt; DataServiceClient:get(path: Path? ) → any Retrieves the data at the specified path. local DataService = require(path.to.DataService).client local currency = DataService:get({ &quot;currency&quot; }) WARNING If you attempt to call this method before the data is initialized, it will yield until the data is available.  ","version":null,"tagName":"h3"},{"title":"set​","type":1,"pageTitle":"DataServiceClient","url":"/dataService/api/DataServiceClient#set","content":"&lt;/&gt; DataServiceClient:set( path: Path , value: any ) → () Sets the data at the specified path to the given value. local DataService = require(path.to.DataService).client DataService:set({ &quot;settings&quot;, &quot;music&quot; }, 25) NOTE This does NOT replicate data to the server. Useful for local data manipulation, such as client-controlled Settings or states.  ","version":null,"tagName":"h3"},{"title":"update​","type":1,"pageTitle":"DataServiceClient","url":"/dataService/api/DataServiceClient#update","content":"&lt;/&gt; DataServiceClient:update( path: Path , callback: (any) → any ) → any Updates the data at the specified path using the provided callback function. local DataService = require(path.to.DataService).client local updatedMusicVolume = DataService:update({ &quot;settings&quot;, &quot;music&quot; }, function(currentValue) return currentValue + 10 end) NOTE This does NOT replicate data to the server. Useful for local data manipulation.  ","version":null,"tagName":"h3"},{"title":"arrayInsert​","type":1,"pageTitle":"DataServiceClient","url":"/dataService/api/DataServiceClient#arrayInsert","content":"&lt;/&gt; DataServiceClient:arrayInsert( path: Path , value: any, index: number?-- Default: nil ) → () Inserts a value into an array at the specified path. If index is provided, it inserts at that index; otherwise, it appends to the end. local DataService = require(path.to.DataService).client DataService:arrayInsert({ &quot;inventory&quot; }, &quot;newItem&quot;, 1) NOTE This does NOT replicate data to the server. Useful for local data manipulation for immediate UI updates.  ","version":null,"tagName":"h3"},{"title":"arrayRemove​","type":1,"pageTitle":"DataServiceClient","url":"/dataService/api/DataServiceClient#arrayRemove","content":"&lt;/&gt; DataServiceClient:arrayRemove( path: Path , index: number ) → () Removes an item from an array at the specified path by its index. local DataService = require(path.to.DataService).client DataService:arrayRemove({ &quot;inventory&quot; }, 1) NOTE This does NOT replicate data to the server. Useful for local data manipulation for immediate UI updates.  ","version":null,"tagName":"h3"},{"title":"getChangedSignal​","type":1,"pageTitle":"DataServiceClient","url":"/dataService/api/DataServiceClient#getChangedSignal","content":"&lt;/&gt; DataServiceClient:getChangedSignal(path: Path ) → Signal&lt;any&gt; Retrieves a signal that fires when the value at the specified path changes. local DataService = require(path.to.DataService).client DataService:getChangedSignal({ &quot;currency&quot; }):Connect(function(newValue) print(&quot;Currency changed to:&quot;, newValue) end)   ","version":null,"tagName":"h3"},{"title":"getIndexChangedSignal​","type":1,"pageTitle":"DataServiceClient","url":"/dataService/api/DataServiceClient#getIndexChangedSignal","content":"&lt;/&gt; DataServiceClient:getIndexChangedSignal(path: Path ) → Signal&lt;any&gt; Retrieves a signal that fires when any child at the specified path changes. local DataService = require(path.to.DataService).client DataService:getIndexChangedSignal({ &quot;tutorial&quot; }):Connect(function(index, newValue) print(&quot;Tutorial changed at index&quot;, index, &quot;changed to:&quot;, newValue) end)   ","version":null,"tagName":"h3"},{"title":"getArrayInsertedSignal​","type":1,"pageTitle":"DataServiceClient","url":"/dataService/api/DataServiceClient#getArrayInsertedSignal","content":"&lt;/&gt; DataServiceClient:getArrayInsertedSignal(path: Path ) → Signal&lt;any&gt; Retrieves a signal that fires when an item is inserted into an array at the specified path. local DataService = require(path.to.DataService).client DataService:getArrayInsertedSignal({ &quot;inventory&quot; }):Connect(function(index, value) print(&quot;Item inserted at index&quot;, index, &quot;with value:&quot;, value) end)   ","version":null,"tagName":"h3"},{"title":"getArrayRemovedSignal​","type":1,"pageTitle":"DataServiceClient","url":"/dataService/api/DataServiceClient#getArrayRemovedSignal","content":"&lt;/&gt; DataServiceClient:getArrayRemovedSignal(path: Path ) → Signal&lt;any&gt; Retrieves a signal that fires when an item is removed from an array at the specified path. local DataService = require(path.to.DataService).client DataService:getArrayRemovedSignal({ &quot;inventory&quot; }):Connect(function(index, value) print(&quot;Item removed from index&quot;, index, &quot;with value:&quot;, value) end)   ","version":null,"tagName":"h3"},{"title":"waitForData​","type":1,"pageTitle":"DataServiceClient","url":"/dataService/api/DataServiceClient#waitForData","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; DataServiceClient:waitForData() → any Waits for the data to be initialized and returns it. ","version":null,"tagName":"h3"},{"title":"DataServiceServer","type":0,"sectionRef":"#","url":"/dataService/api/DataServiceServer","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"DataServiceServer","url":"/dataService/api/DataServiceServer#types","content":" ","version":null,"tagName":"h2"},{"title":"DataTemplate​","type":1,"pageTitle":"DataServiceServer","url":"/dataService/api/DataServiceServer#DataTemplate","content":"&lt;/&gt; type DataTemplate = {[string]: any} Defines the structure of player data used by the DataServiceServer. local datatemplate = { currency = 0, level = 1, xp = 0, inventory = {}, tutorial = { completed = false, step = 0, }, stats = { enemiesDefeated = 0, timePlayed = 0, questsCompleted = 0, } } NOTE Player data automatically reconciles the template on join if new keys are added. WARNING Follow JSON rules for all data. (e.g., no Vector3, CFrame, etc.)  ","version":null,"tagName":"h3"},{"title":"DataOptions​","type":1,"pageTitle":"DataServiceServer","url":"/dataService/api/DataServiceServer#DataOptions","content":"&lt;/&gt; interface DataOptions { template: DataTemplate-- Template dictionary for player data. profileStoreIndex: string-- Index for the ProfileStore. useMock: boolean?-- Use Mock data for testing. viewedUserId: number?-- User ID to view data for. Use to view a specific player's data without saving. overridenUserId: number?-- User ID to override for the profile. Use to play on another player's save. dontSave: boolean?-- Prevent saving the profile. Use for testing without saving. resetData: boolean?-- Reset the data on player join. Use to wipe data for testing. } local options = { template = require(path.to.datatemplate), profileStoreIndex = &quot;Public&quot;, } Provides options for initializing the DataServiceServer. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"DataServiceServer","url":"/dataService/api/DataServiceServer#functions","content":" ","version":null,"tagName":"h2"},{"title":"init​","type":1,"pageTitle":"DataServiceServer","url":"/dataService/api/DataServiceServer#init","content":"&lt;/&gt; DataServiceServer:init(options: DataOptions) → () Initializes DataServiceServer with the provided options. local DataService = require(path.to.DataService).server local dataTemplate = require(path.to.datatemplate) DataService:init({ template = dataTemplate, profileStoreIndex = &quot;Testing&quot;, useMock = true, }) WARNING :init(...) must be called before using any other methods. Attempting to init more than once will throw an error.  ","version":null,"tagName":"h3"},{"title":"onPlayerInit​","type":1,"pageTitle":"DataServiceServer","url":"/dataService/api/DataServiceServer#onPlayerInit","content":"Override &lt;/&gt; DataServiceServer:onPlayerInit( player: Player , data: DataTemplate ) → () Overridable method called when a player initializes their data. You can use this method to set initial values or perform actions when a player joins. local DataService = require(path.to.DataService).server function DataService:onPlayerInit(player: Player, data: DataTemplate): () print(player.Name .. &quot; has initialized with data:&quot;, data) data.sessionJoinTime = os.time() -- We can directly modify data since no connections exist yet. end NOTE onPlayerInit is called after a player's data has loaded but before it is sent to the client or is available to the server.  ","version":null,"tagName":"h3"},{"title":"addPlayerRemovingCallback​","type":1,"pageTitle":"DataServiceServer","url":"/dataService/api/DataServiceServer#addPlayerRemovingCallback","content":"&lt;/&gt; DataServiceServer:addPlayerRemovingCallback(fn: ( player: Player , data: any ) → ()) → () Add any number of functions to be called when a player is removed. Used to perform cleanup or save data before the player leaves. DataService:addPlayerRemovingCallback(function(player: Player, data: any): () print(player.Name .. &quot; is leaving with data:&quot;, data) -- Perform any cleanup or save operations here end) local disconnect = DataService:addPlayerRemovingCallback(function(player: Player, data: any): () data.currency = 0 end) -- Later, you can disconnect this function if needed disconnect()   ","version":null,"tagName":"h3"},{"title":"hasProfile​","type":1,"pageTitle":"DataServiceServer","url":"/dataService/api/DataServiceServer#hasProfile","content":"&lt;/&gt; DataServiceServer:hasProfile(player: Player ) → boolean Checks if a profile exists for the given player.  ","version":null,"tagName":"h3"},{"title":"getProfile​","type":1,"pageTitle":"DataServiceServer","url":"/dataService/api/DataServiceServer#getProfile","content":"&lt;/&gt; DataServiceServer:getProfile(player: Player ) → Profile Retrieves the profile for the given player. Throws an error if the profile does not exist.  ","version":null,"tagName":"h3"},{"title":"waitForData​","type":1,"pageTitle":"DataServiceServer","url":"/dataService/api/DataServiceServer#waitForData","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; DataServiceServer:waitForData(player: Player ) → Data Waits for the player's data to be initialized and returns it. If the data is already available, it returns immediately.  ","version":null,"tagName":"h3"},{"title":"get​","type":1,"pageTitle":"DataServiceServer","url":"/dataService/api/DataServiceServer#get","content":"&lt;/&gt; DataServiceServer:get( player: Player , path: Path? ) → any Retrieves the value at the specified path for the given player. If no path is provided, it returns the entire data object. local DataService = require(path.to.DataService).server local currency = DataService:get(player, { &quot;currency&quot; }) local tutorialStep = DataService:get(player, { &quot;tutorial&quot;, &quot;step&quot; })   ","version":null,"tagName":"h3"},{"title":"set​","type":1,"pageTitle":"DataServiceServer","url":"/dataService/api/DataServiceServer#set","content":"&lt;/&gt; DataServiceServer:set( player: Player , path: Path , value: any, dontReplicate: boolean?-- Optional, defaults to false ) → () Sets the value at the specified path for the given player. If dontReplicate is true, it does not replicate the change to the client. local DataService = require(path.to.DataService).server DataService:set(player, { &quot;currency&quot; }, 100) DataService:set(player, { &quot;tutorial&quot;, &quot;step&quot; }, 2)   ","version":null,"tagName":"h3"},{"title":"update​","type":1,"pageTitle":"DataServiceServer","url":"/dataService/api/DataServiceServer#update","content":"&lt;/&gt; DataServiceServer:update( player: Player , path: Path , callback: (any) → any, dontReplicate: boolean?-- Optional, defaults to false ) → any Updates the value at the specified path for the given player using a callback function. If dontReplicate is true, it does not replicate the change to the client. local updatedCurrency = DataService:update(player, { &quot;currency&quot; }, function(currentValue) return currentValue + 50 end)   ","version":null,"tagName":"h3"},{"title":"arrayInsert​","type":1,"pageTitle":"DataServiceServer","url":"/dataService/api/DataServiceServer#arrayInsert","content":"&lt;/&gt; DataServiceServer:arrayInsert( player: Player , path: Path , value: any, index: number?,-- Optional, defaults to nil (appends to the end) dontReplicate: boolean?-- Optional, defaults to false ) → () Inserts a value into an array at the specified path for the given player. If dontReplicate is true, it does not replicate the change to the client. DataService:arrayInsert(player, { &quot;inventory&quot; }, newItem) DataService:arrayInsert(player, { &quot;inventory&quot; }, newItem, 1) -- Inserts at index 1 NOTE This mimics the behavior of table.insert  ","version":null,"tagName":"h3"},{"title":"arrayRemove​","type":1,"pageTitle":"DataServiceServer","url":"/dataService/api/DataServiceServer#arrayRemove","content":"&lt;/&gt; DataServiceServer:arrayRemove( player: Player , path: Path , index: number, dontReplicate: boolean?-- Optional, defaults to false ) → () Removes a value from an array at the specified path for the given player. If dontReplicate is true, it does not replicate the change to the client. DataService:arrayRemove(player, { &quot;inventory&quot; }, 1) -- Removes the item at index 1 NOTE This mimics the behavior of table.remove  ","version":null,"tagName":"h3"},{"title":"getChangedSignal​","type":1,"pageTitle":"DataServiceServer","url":"/dataService/api/DataServiceServer#getChangedSignal","content":"&lt;/&gt; DataServiceServer:getChangedSignal( player: Player , path: Path ) → Signal&lt;any&gt; Retrieves a signal that fires when the value at the specified path changes. DataService:getChangedSignal(player, { &quot;currency&quot; }):Connect(function(newValue) print(&quot;Currency changed to:&quot;, newValue) end)   ","version":null,"tagName":"h3"},{"title":"getIndexChangedSignal​","type":1,"pageTitle":"DataServiceServer","url":"/dataService/api/DataServiceServer#getIndexChangedSignal","content":"&lt;/&gt; DataServiceServer:getIndexChangedSignal( player: Player , path: Path ) → Signal&lt;any&gt; Retrieves a signal that fires when any child at the specified path changes. DataService:getIndexChangedSignal(player, { &quot;tutorial&quot; }):Connect(function(index, newValue) print(&quot;Tutorial changed at index&quot;, index, &quot;changed to:&quot;, newValue) end)   ","version":null,"tagName":"h3"},{"title":"getArrayInsertedSignal​","type":1,"pageTitle":"DataServiceServer","url":"/dataService/api/DataServiceServer#getArrayInsertedSignal","content":"&lt;/&gt; DataServiceServer:getArrayInsertedSignal( player: Player , path: Path ) → Signal&lt;any&gt; Retrieves a signal that fires when an item is inserted into an array at the specified path. DataService:getArrayInsertedSignal(player, { &quot;inventory&quot; }):Connect(function(index, value) print(&quot;Item inserted at index&quot;, index, &quot;with value:&quot;, value) end)   ","version":null,"tagName":"h3"},{"title":"getArrayRemovedSignal​","type":1,"pageTitle":"DataServiceServer","url":"/dataService/api/DataServiceServer#getArrayRemovedSignal","content":"&lt;/&gt; DataServiceServer:getArrayRemovedSignal( player: Player , path: Path ) → Signal&lt;any&gt; Retrieves a signal that fires when an item is removed from an array at the specified path. DataService:getArrayRemovedSignal(player, { &quot;inventory&quot; }):Connect(function(index, value) print(&quot;Item removed from index&quot;, index, &quot;with value:&quot;, value) end)  ","version":null,"tagName":"h3"}],"options":{"id":"default"}}