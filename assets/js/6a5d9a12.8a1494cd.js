"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[188],{5976:e=>{e.exports=JSON.parse('{"functions":[{"name":"init","desc":"Initializes DataServiceServer with the provided options.\\n```lua\\nlocal DataService = require(path.to.DataService).server\\nlocal dataTemplate = require(path.to.datatemplate)\\n\\nDataService:init({\\n\\ttemplate = dataTemplate,\\n\\tprofileStoreIndex = \\"Testing\\",\\n\\tuseMock = true,\\n})\\n```\\n:::warning\\n`:init(...)` must be called before using any other methods. Attempting to `init` more than once will throw an error.\\n:::","params":[{"name":"options","desc":"","lua_type":"DataOptions"}],"returns":[],"function_type":"method","source":{"line":125,"path":"src/DataServiceServer.luau"}},{"name":"onPlayerInit","desc":"Overridable method called when a player initializes their data.\\nYou can use this method to set initial values or perform actions when a player joins.\\n\\n```lua\\nlocal DataService = require(path.to.DataService).server\\nfunction DataService:onPlayerInit(player: Player, data: DataTemplate): ()\\n\\tprint(player.Name .. \\" has initialized with data:\\", data)\\n\\tdata.sessionJoinTime = os.time() -- We can directly modify data since no connections exist yet.\\nend\\n```\\n\\n:::note\\n`onPlayerInit` is called after a player\'s data has loaded but before it is sent to the client or is available to the server.\\n:::","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"data","desc":"","lua_type":"DataTemplate"}],"returns":[],"function_type":"method","tags":["Override"],"source":{"line":293,"path":"src/DataServiceServer.luau"}},{"name":"addPlayerRemovingCallback","desc":"Add any number of functions to be called when a player is removed.\\nUsed to perform cleanup or save data before the player leaves.\\n\\n```lua\\nDataService:addPlayerRemovingCallback(function(player: Player, data: any): ()\\n\\tprint(player.Name .. \\" is leaving with data:\\", data)\\n\\t-- Perform any cleanup or save operations here\\nend)\\n```\\n\\n```lua\\nlocal disconnect = DataService:addPlayerRemovingCallback(function(player: Player, data: any): ()\\n\\tdata.currency = 0\\nend)\\n\\n-- Later, you can disconnect this function if needed\\ndisconnect()\\n```","params":[{"name":"fn","desc":"","lua_type":"(player: Player, data: any) -> ()"}],"returns":[],"function_type":"method","source":{"line":319,"path":"src/DataServiceServer.luau"}},{"name":"hasProfile","desc":"Checks if a profile exists for the given player.","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","source":{"line":353,"path":"src/DataServiceServer.luau"}},{"name":"getProfile","desc":"Retrieves the profile for the given player.\\nThrows an error if the profile does not exist.","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"Profile"}],"function_type":"method","source":{"line":366,"path":"src/DataServiceServer.luau"}},{"name":"waitForData","desc":"Waits for the player\'s data to be initialized and returns it.\\nIf the data is already available, it returns immediately.","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"Data"}],"function_type":"method","yields":true,"source":{"line":381,"path":"src/DataServiceServer.luau"}},{"name":"get","desc":"Retrieves the value at the specified path for the given player.\\nIf no path is provided, it returns the entire data object.\\n\\n```lua\\nlocal DataService = require(path.to.DataService).server\\nlocal currency = DataService:get(player, { \\"currency\\" })\\nlocal tutorialStep = DataService:get(player, { \\"tutorial\\", \\"step\\" })\\n```","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"path","desc":"","lua_type":"Path?"}],"returns":[{"desc":"","lua_type":"any"}],"function_type":"method","source":{"line":413,"path":"src/DataServiceServer.luau"}},{"name":"set","desc":"Sets the value at the specified path for the given player.\\nIf `dontReplicate` is true, it does not replicate the change to the client.\\n\\n```lua\\nlocal DataService = require(path.to.DataService).server\\nDataService:set(player, { \\"currency\\" }, 100)\\nDataService:set(player, { \\"tutorial\\", \\"step\\" }, 2)\\n```","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"path","desc":"","lua_type":"Path"},{"name":"value","desc":"","lua_type":"any"},{"name":"dontReplicate","desc":"Optional, defaults to false","lua_type":"boolean?"}],"returns":[],"function_type":"method","source":{"line":434,"path":"src/DataServiceServer.luau"}},{"name":"update","desc":"Updates the value at the specified path for the given player using a callback function.\\nIf `dontReplicate` is true, it does not replicate the change to the client.\\n\\n```lua\\nlocal updatedCurrency = DataService:update(player, { \\"currency\\" }, function(currentValue)\\n\\treturn currentValue + 50\\nend)\\n```","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"path","desc":"","lua_type":"Path"},{"name":"callback","desc":"","lua_type":"(any) -> any"},{"name":"dontReplicate","desc":"Optional, defaults to false","lua_type":"boolean?"}],"returns":[{"desc":"","lua_type":"any"}],"function_type":"method","source":{"line":460,"path":"src/DataServiceServer.luau"}},{"name":"arrayInsert","desc":"Inserts a value into an array at the specified path for the given player.\\nIf `dontReplicate` is true, it does not replicate the change to the client.\\n\\n```lua\\nDataService:arrayInsert(player, { \\"inventory\\" }, newItem)\\nDataService:arrayInsert(player, { \\"inventory\\" }, newItem, 1) -- Inserts at index 1\\n```\\n\\n:::note\\nThis mimics the behavior of `table.insert`\\n:::","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"path","desc":"","lua_type":"Path"},{"name":"value","desc":"","lua_type":"any"},{"name":"index","desc":"Optional, defaults to nil (appends to the end)","lua_type":"number?"},{"name":"dontReplicate","desc":"Optional, defaults to false","lua_type":"boolean?"}],"returns":[],"function_type":"method","source":{"line":497,"path":"src/DataServiceServer.luau"}},{"name":"arrayRemove","desc":"Removes a value from an array at the specified path for the given player.\\nIf `dontReplicate` is true, it does not replicate the change to the client.\\n\\n```lua\\nDataService:arrayRemove(player, { \\"inventory\\" }, 1) -- Removes the item at index 1\\n```\\n\\n:::note\\nThis mimics the behavior of `table.remove`\\n:::","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"path","desc":"","lua_type":"Path"},{"name":"index","desc":"","lua_type":"number"},{"name":"dontReplicate","desc":"Optional, defaults to false","lua_type":"boolean?"}],"returns":[],"function_type":"method","source":{"line":531,"path":"src/DataServiceServer.luau"}},{"name":"getChangedSignal","desc":"Retrieves a signal that fires when the value at the specified path changes.\\n\\n```lua\\nDataService:getChangedSignal(player, { \\"currency\\" }):Connect(function(newValue)\\n\\tprint(\\"Currency changed to:\\", newValue)\\nend)\\n```","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"path","desc":"","lua_type":"Path"}],"returns":[{"desc":"","lua_type":"Signal<any>"}],"function_type":"method","source":{"line":562,"path":"src/DataServiceServer.luau"}},{"name":"getIndexChangedSignal","desc":"Retrieves a signal that fires when any child at the specified path changes.\\n\\n```lua\\nDataService:getIndexChangedSignal(player, { \\"tutorial\\" }):Connect(function(index, newValue)\\n\\tprint(\\"Tutorial changed at index\\", index, \\"changed to:\\", newValue)\\nend)\\n```","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"path","desc":"","lua_type":"Path"}],"returns":[{"desc":"","lua_type":"Signal<any>"}],"function_type":"method","source":{"line":581,"path":"src/DataServiceServer.luau"}},{"name":"getArrayInsertedSignal","desc":"Retrieves a signal that fires when an item is inserted into an array at the specified path.\\n\\n```lua\\nDataService:getArrayInsertedSignal(player, { \\"inventory\\" }):Connect(function(index, value)\\n\\tprint(\\"Item inserted at index\\", index, \\"with value:\\", value)\\nend)\\n```","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"path","desc":"","lua_type":"Path"}],"returns":[{"desc":"","lua_type":"Signal<any>"}],"function_type":"method","source":{"line":600,"path":"src/DataServiceServer.luau"}},{"name":"getArrayRemovedSignal","desc":"Retrieves a signal that fires when an item is removed from an array at the specified path.\\n\\n```lua\\nDataService:getArrayRemovedSignal(player, { \\"inventory\\" }):Connect(function(index, value)\\n\\tprint(\\"Item removed from index\\", index, \\"with value:\\", value)\\nend)\\n```","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"path","desc":"","lua_type":"Path"}],"returns":[{"desc":"","lua_type":"Signal<any>"}],"function_type":"method","source":{"line":619,"path":"src/DataServiceServer.luau"}}],"properties":[],"types":[{"name":"DataTemplate","desc":"Defines the structure of player data used by the DataServiceServer.\\n\\n```lua\\nlocal datatemplate = {\\n\\tcurrency = 0,\\n\\tlevel = 1,\\n\\txp = 0,\\n\\tinventory = {},\\n\\ttutorial = {\\n\\t\\tcompleted = false,\\n\\t\\tstep = 0,\\n\\t},\\n\\tstats = {\\n\\t\\tenemiesDefeated = 0,\\n\\t\\ttimePlayed = 0,\\n\\t\\tquestsCompleted = 0,\\n\\t}\\n}\\n```\\n\\n\\n:::note\\nPlayer data automatically reconciles the template on join if new keys are added.\\n:::\\n:::warning\\nFollow JSON rules for all data. (e.g., no Vector3, CFrame, etc.)\\n:::","lua_type":"{ [string]: any }","source":{"line":58,"path":"src/DataServiceServer.luau"}},{"name":"DataOptions","desc":"```lua\\nlocal options = {\\n\\ttemplate = require(path.to.datatemplate),\\n\\tprofileStoreIndex = \\"Public\\",\\n}\\n```\\n\\nProvides options for initializing the DataServiceServer.","fields":[{"name":"template","lua_type":"DataTemplate","desc":"Template dictionary for player data."},{"name":"profileStoreIndex","lua_type":"string","desc":"Index for the ProfileStore."},{"name":"useMock","lua_type":"boolean?","desc":"Use Mock data for testing."},{"name":"viewedUserId","lua_type":"number?","desc":"User ID to view data for. Use to view a specific player\'s data without saving."},{"name":"overridenUserId","lua_type":"number?","desc":"User ID to override for the profile. Use to play on another player\'s save."},{"name":"dontSave","lua_type":"boolean?","desc":"Prevent saving the profile. Use for testing without saving."},{"name":"resetData","lua_type":"boolean?","desc":"Reset the data on player join. Use to wipe data for testing."}],"source":{"line":80,"path":"src/DataServiceServer.luau"}}],"name":"DataServiceServer","desc":"The server-side service for managing player data.","source":{"line":96,"path":"src/DataServiceServer.luau"}}')}}]);