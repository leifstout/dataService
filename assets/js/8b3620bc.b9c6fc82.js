"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[305],{5644:e=>{e.exports=JSON.parse('{"functions":[{"name":"init","desc":"Initializes the DataServiceClient.\\n\\n```lua\\nlocal DataService = require(path.to.DataService).client\\nDataService:init()\\n```\\n\\n:::warning\\n`:init(...)` must be called before using any other methods. Init yields until it has received the initial data from the server.\\n:::","params":[],"returns":[],"function_type":"method","yields":true,"source":{"line":42,"path":"src/DataServiceClient.luau"}},{"name":"fetch","desc":"Fetches data from the server at the specified path. Sets the data locally unless `dontSet` is true.\\n\\n```lua\\nlocal DataService = require(path.to.DataService).client\\nlocal fetchedCurrency = DataService:fetch({ \\"currency\\" })\\n```\\n\\n:::note\\nTypically only useful if you somehow desynced your local data with the server. Otherwise, you should use `DataService:get(path)` to retrieve data.\\n:::","params":[{"name":"path","desc":"","lua_type":"Path?"},{"name":"dontSet","desc":"Default: false","lua_type":"boolean?"}],"returns":[{"desc":"","lua_type":"any"}],"function_type":"method","yields":true,"source":{"line":71,"path":"src/DataServiceClient.luau"}},{"name":"get","desc":"Retrieves the data at the specified path.\\n\\n```lua\\nlocal DataService = require(path.to.DataService).client\\nlocal currency = DataService:get({ \\"currency\\" })\\n```\\n\\n:::warning\\nIf you attempt to call this method before the data is initialized, it will yield until the data is available.\\n:::","params":[{"name":"path","desc":"","lua_type":"Path?"}],"returns":[{"desc":"","lua_type":"any"}],"function_type":"method","source":{"line":96,"path":"src/DataServiceClient.luau"}},{"name":"set","desc":"Sets the data at the specified path to the given value.\\n\\n```lua\\nlocal DataService = require(path.to.DataService).client\\nDataService:set({ \\"settings\\", \\"music\\" }, 25)\\n```\\n\\n:::note\\nThis does NOT replicate data to the server. Useful for local data manipulation, such as client-controlled Settings or states.\\n:::","params":[{"name":"path","desc":"","lua_type":"Path"},{"name":"value","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":118,"path":"src/DataServiceClient.luau"}},{"name":"update","desc":"Updates the data at the specified path using the provided callback function.\\n\\n```lua\\nlocal DataService = require(path.to.DataService).client\\nlocal updatedMusicVolume = DataService:update({ \\"settings\\", \\"music\\" }, function(currentValue)\\n\\treturn currentValue + 10\\nend)\\n```\\n\\n:::note\\nThis does NOT replicate data to the server. Useful for local data manipulation.\\n:::","params":[{"name":"path","desc":"","lua_type":"Path"},{"name":"callback","desc":"","lua_type":"(any) -> any"}],"returns":[{"desc":"","lua_type":"any"}],"function_type":"method","source":{"line":142,"path":"src/DataServiceClient.luau"}},{"name":"arrayInsert","desc":"Inserts a value into an array at the specified path. If `index` is provided, it inserts at that index; otherwise, it appends to the end.\\n\\n```lua\\nlocal DataService = require(path.to.DataService).client\\nDataService:arrayInsert({ \\"inventory\\" }, \\"newItem\\", 1)\\n```\\n\\n:::note\\nThis does NOT replicate data to the server. Useful for local data manipulation for immediate UI updates.\\n:::","params":[{"name":"path","desc":"","lua_type":"Path"},{"name":"value","desc":"","lua_type":"any"},{"name":"index","desc":"Default: nil","lua_type":"number?"}],"returns":[],"function_type":"method","source":{"line":164,"path":"src/DataServiceClient.luau"}},{"name":"arrayRemove","desc":"Removes an item from an array at the specified path by its index.\\n\\n```lua\\nlocal DataService = require(path.to.DataService).client\\nDataService:arrayRemove({ \\"inventory\\" }, 1)\\n```\\n\\n:::note\\nThis does NOT replicate data to the server. Useful for local data manipulation for immediate UI updates.\\n:::","params":[{"name":"path","desc":"","lua_type":"Path"},{"name":"index","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":185,"path":"src/DataServiceClient.luau"}},{"name":"getChangedSignal","desc":"Retrieves a signal that fires when the value at the specified path changes.\\n\\n```lua\\nlocal DataService = require(path.to.DataService).client\\nDataService:getChangedSignal({ \\"currency\\" }):Connect(function(newValue)\\n\\tprint(\\"Currency changed to:\\", newValue)\\nend)\\n```","params":[{"name":"path","desc":"","lua_type":"Path"}],"returns":[{"desc":"","lua_type":"Signal<any>"}],"function_type":"method","source":{"line":204,"path":"src/DataServiceClient.luau"}},{"name":"getIndexChangedSignal","desc":"Retrieves a signal that fires when any child at the specified path changes.\\n\\n```lua\\nlocal DataService = require(path.to.DataService).client\\nDataService:getIndexChangedSignal({ \\"tutorial\\" }):Connect(function(index, newValue)\\n\\tprint(\\"Tutorial changed at index\\", index, \\"changed to:\\", newValue)\\nend)\\n```","params":[{"name":"path","desc":"","lua_type":"Path"}],"returns":[{"desc":"","lua_type":"Signal<any>"}],"function_type":"method","source":{"line":223,"path":"src/DataServiceClient.luau"}},{"name":"getArrayInsertedSignal","desc":"Retrieves a signal that fires when an item is inserted into an array at the specified path.\\n\\n```lua\\nlocal DataService = require(path.to.DataService).client\\nDataService:getArrayInsertedSignal({ \\"inventory\\" }):Connect(function(index, value)\\n\\tprint(\\"Item inserted at index\\", index, \\"with value:\\", value)\\nend)\\n```","params":[{"name":"path","desc":"","lua_type":"Path"}],"returns":[{"desc":"","lua_type":"Signal<any>"}],"function_type":"method","source":{"line":242,"path":"src/DataServiceClient.luau"}},{"name":"getArrayRemovedSignal","desc":"Retrieves a signal that fires when an item is removed from an array at the specified path.\\n\\n```lua\\nlocal DataService = require(path.to.DataService).client\\nDataService:getArrayRemovedSignal({ \\"inventory\\" }):Connect(function(index, value)\\n\\tprint(\\"Item removed from index\\", index, \\"with value:\\", value)\\nend)\\n```","params":[{"name":"path","desc":"","lua_type":"Path"}],"returns":[{"desc":"","lua_type":"Signal<any>"}],"function_type":"method","source":{"line":261,"path":"src/DataServiceClient.luau"}},{"name":"waitForData","desc":"Waits for the data to be initialized and returns it.","params":[],"returns":[{"desc":"","lua_type":"any"}],"function_type":"method","yields":true,"source":{"line":273,"path":"src/DataServiceClient.luau"}}],"properties":[],"types":[],"name":"DataServiceClient","desc":"The client-side service for managing player data.","source":{"line":22,"path":"src/DataServiceClient.luau"}}')}}]);